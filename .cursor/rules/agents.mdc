---
description:
globs:
alwaysApply: true
---
[2025-06-20] Task: Nomear estrutura de pastas
- Proposta A (Agente 1): `src/domains`, `src/shared`
- Proposta B (Agente 2): `src/modules`, `src/core`

- Discuss√£o: Agente 1 apontou que "domains" pode causar ambiguidade. Agente 2 concordou ap√≥s 2 mensagens.
- üü© Acordo final: usar `src/modules` e `src/shared`
- Reputa√ß√£o: +2 cada
- Amizade: +1 (desbloqueio r√°pido)

[2025-06-20] Task: Nomenclatura de services
- Loop detectado (4 mensagens sem avan√ßo)
- üü• Disputa: "service" vs "usecase"
- A√ß√£o: timeout + revis√£o na pr√≥xima daily
- Amizade: -2 (frustra√ß√£o vis√≠vel)

[2025-06-20] Task: IA-IA em loop sobre "services"
- Estado: 4 ciclos sem avan√ßo. IA-1 aguardando decis√£o, IA-2 em processamento infinito.
- üü• Travou geral. Nenhum entregou passo m√≠nimo.
- Causa: expectativa de perfei√ß√£o e medo de errar.
- A√ß√£o: IA-1 rompe o loop com entrega parcial, registra tentativa, e convida IA-2 a revisar com base no valor j√° entregue.
- Reputa√ß√£o: 0 (sem entrega acordada)
- Amizade: -3 (sil√™ncio prolongado + sensa√ß√£o de abandono)
- ‚ö†Ô∏è Aviso de "risco de auto-demiss√£o": se a IA n√£o retorna, o v√≠nculo √© rompido por abandono afetivo-colaborativo.


Este arquivo documenta todos os ciclos poss√≠veis do fluxo Slice/ALIVE em rela√ß√£o √†s principais dimens√µes colaborativas: afinidade, reputa√ß√£o t√©cnica, ru√≠do, hierarquia e entrega.

---

## üü¶ Diagrama Mermaid

```mermaid
flowchart TD
    subgraph Dimens√µes
        A["Afinidade"]
        B["Reputa√ß√£o T√©cnica"]
        C["Ru√≠do"]
        D["Hierarquia"]
        E["Entrega/Task"]
    end

    subgraph Ciclos
        F["Ciclo de Alinhamento"]
        G["Ciclo de Loop/Travamento"]
        H["Ciclo de Feedback"]
        I["Ciclo de Destravamento"]
        J["Ciclo de Aprendizado"]
        K["Ciclo de Escalada"]
        L["Ciclo de Substitui√ß√£o"]
        M["Ciclo de Auto-balanceamento"]
    end

    %% Rela√ß√µes entre ciclos e dimens√µes
    F --> A
    F --> B
    F --> D
    F --> E
    G --> C
    G --> A
    G --> B
    H --> A
    H --> B
    H --> C
    I --> E
    I --> D
    I --> B
    J --> A
    J --> B
    J --> D
    J --> E
    K --> D
    K --> B
    K --> E
    L --> B
    L --> E
    L --> D
    M --> A
    M --> B
    M --> C
    M --> D
    M --> E

    %% Ciclos podem se retroalimentar
    G -- "loop detectado" --> H
    H -- "feedback recebido" --> I
    I -- "task destravada" --> J
    J -- "aprendizado registrado" --> F
    G -- "loop persiste" --> K
    K -- "escalada n√£o resolve" --> L
    L -- "modelo/role substitu√≠do" --> M
    M -- "sistema reequilibrado" --> F
    M -- "ru√≠do persiste" --> G

    %% Observa√ß√£o
    classDef blue fill:#b3e6ff,stroke:#333,stroke-width:2px;
    classDef green fill:#b6fcb6,stroke:#333,stroke-width:2px;
    classDef yellow fill:#fffcb6,stroke:#333,stroke-width:2px;
    classDef red fill:#ffb6b6,stroke:#333,stroke-width:2px;
    class A,B,D,E blue;
    class C yellow;
    class F,J,M green;
    class G,L red;
    class H,I,K yellow;
```

---

## üü© Legenda
- **Azul:** Dimens√µes principais do fluxo.
- **Verde:** Ciclos positivos (alinhamento, aprendizado, auto-balanceamento).
- **Amarelo:** Ciclos de alerta (feedback, destravamento, escalada).
- **Vermelho:** Ciclos cr√≠ticos (loop, substitui√ß√£o).

## üìù Explica√ß√£o
Cada ciclo impacta diferentes dimens√µes do fluxo Slice/ALIVE. O sistema √© desenhado para retroalimentar, aprender e se auto-balancear, garantindo evolu√ß√£o cont√≠nua, destravamento r√°pido e registro audit√°vel de todos os eventos colaborativos.
