#!/bin/bash

set -e

# Checar se est√° dentro de um reposit√≥rio git
if [ ! -d ".git" ]; then
    echo "‚ùå Esse diret√≥rio n√£o √© um reposit√≥rio Git!"
    exit 1
fi

not_a_monorepo() {
  find . -type d -name .git ! -path './.git' -exec rm -rf {} + || true
  rm -rf node_modules || true
  rm -rf pnpm-lock.yaml || true
  rm -rf pnpm-workspace.yaml || true
  rm -rf package.json || true
  rn -rf pdm.lock || true
  rn -rf.venv || true
}

# limpar reposit√≥rio de "erros de execu√ß√£o"
not_a_monorepo

# Fun√ß√£o para formatar o frontend
format_client() {
    cd packages/client && pnpm format || true
    cd - >/dev/null
}

# Fun√ß√£o para formatar o backend
format_server() {
    cd packages/server && pnpm format || true
    cd - >/dev/null
}

# Rodar formata√ß√£o em paralelo
format_client &
format_server &
wait


# Capturar timestamp
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")

# Mensagem de commit padr√£o
COMMIT_MESSAGE="Auto-commit: $TIMESTAMP"

echo "üöÄ Adicionando todas as altera√ß√µes..."
git add .

echo "üöÄ Criando commit autom√°tico..."
git commit --allow-empty -m "$COMMIT_MESSAGE" || echo "‚ö†Ô∏è Nada para commitar."

# echo "üöÄ Enviando para o reposit√≥rio remoto (se existir origin)..."
# git push origin $(git rev-parse --abbrev-ref HEAD) || echo "‚ö†Ô∏è Sem reposit√≥rio remoto configurado."

echo "‚úÖ Auto-commit conclu√≠do: $COMMIT_MESSAGE"

# pnpm exec nx generate @nx/express:application --directory=packages/ai-agent --name=ai-agent --unitTestRunner=jest --no-interactive

chmod +x -R ./*.sh
find . -type f -name "*.sh" -exec chmod +x {} \; -print

# docker rm -f $(docker ps -aq)
# docker system prune -a -f --volumes
# find . -type d -name ".git" -exec rm -rf {} +

# sudo sysctl -w net.mptcp.enabled=1
