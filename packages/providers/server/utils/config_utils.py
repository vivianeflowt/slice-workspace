#!/usr/bin/env python3
"""
üîß Config Utils - Slice/ALIVE Providers Server
Fun√ß√µes helper para configura√ß√£o e acesso a constantes.

Princ√≠pios CONCEPTS.md:
- Isolamento por Camada: Utils separados de constantes
- Responsabilidade √önica: Apenas helpers de configura√ß√£o
- Valida√ß√£o Forte: Type hints e valida√ß√£o de entrada
"""

from typing import Any, Dict, List

from server.constants import (
    ALTERNATIVE_MODELS,
    CPU_THREADS,
    DEBUG_MODE,
    DEFAULT_MODELS,
    DEVICE,
    FORCE_CPU_ONLY,
    REQUEST_TIMEOUT_SECONDS,
    SERVER_HOST,
    SERVER_PORT,
)


def get_model_for_function(function_name: str) -> str:
    """
    Retorna o modelo padr√£o para uma fun√ß√£o espec√≠fica.

    Args:
        function_name: Nome da fun√ß√£o (classify, embed, pos_tag)

    Returns:
        str: Nome do modelo padr√£o ou string vazia se n√£o encontrado
    """
    if not isinstance(function_name, str):
        return ""

    return DEFAULT_MODELS.get(function_name.lower(), "")


def get_alternative_models(function_name: str) -> List[str]:
    """
    Retorna lista de modelos alternativos para uma fun√ß√£o.

    Args:
        function_name: Nome da fun√ß√£o (classify, embed, pos_tag)

    Returns:
        List[str]: Lista de modelos alternativos
    """
    if not isinstance(function_name, str):
        return []

    return ALTERNATIVE_MODELS.get(function_name.lower(), [])


def is_cpu_only_enforced() -> bool:
    """
    Verifica se o modo CPU-only est√° ativado.

    Returns:
        bool: True se CPU-only est√° for√ßado
    """
    return FORCE_CPU_ONLY


def get_server_config() -> Dict[str, Any]:
    """
    Retorna configura√ß√£o completa do servidor.

    Returns:
        Dict[str, Any]: Configura√ß√µes do servidor
    """
    return {
        "host": SERVER_HOST,
        "port": SERVER_PORT,
        "timeout": REQUEST_TIMEOUT_SECONDS,
        "device": DEVICE,
        "cpu_threads": CPU_THREADS,
        "debug": DEBUG_MODE,
    }


def validate_function_name(function_name: str) -> bool:
    """
    Valida se o nome da fun√ß√£o √© suportado.

    Args:
        function_name: Nome da fun√ß√£o para validar

    Returns:
        bool: True se fun√ß√£o √© v√°lida
    """
    if not isinstance(function_name, str):
        return False

    return function_name.lower() in DEFAULT_MODELS


def get_supported_functions() -> List[str]:
    """
    Retorna lista de fun√ß√µes suportadas.

    Returns:
        List[str]: Lista de nomes de fun√ß√µes suportadas
    """
    return list(DEFAULT_MODELS.keys())


def get_model_config(function_name: str) -> Dict[str, Any]:
    """
    Retorna configura√ß√£o completa de um modelo espec√≠fico.

    Args:
        function_name: Nome da fun√ß√£o

    Returns:
        Dict[str, Any]: Configura√ß√£o do modelo
    """
    if not validate_function_name(function_name):
        return {}

    return {
        "function": function_name,
        "default_model": get_model_for_function(function_name),
        "alternatives": get_alternative_models(function_name),
        "device": DEVICE,
        "cpu_threads": CPU_THREADS,
        "force_cpu_only": FORCE_CPU_ONLY,
    }
