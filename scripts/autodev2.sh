#!/bin/bash

# === MCP autodev3.sh ===
# Orquestrador incremental de microtasks do TASKS.md (MCP) com an√°lise de microtask
# e diretrizes incrementais para IA, agora com logs coloridos, persistentes e toler√¢ncia a falhas.

TASKS_FILE="${1:-packages/mcp-tasks/TASKS.md}"
STATUS_FILE="autodev2.status.json"
DELAY=10
INITIAL_WAIT=2
PROMPT_TIMEOUT=120
PROMPT_X=2943
PROMPT_Y=1290
INITIAL_PROMPT="Arquivo de tasks: $TASKS_FILE\n\nContexto: Voc√™ √© um agente executor aut√¥nomo. Limpe todo o seu contexto anterior antes de iniciar. N√£o utilize informa√ß√µes, vari√°veis ou hist√≥rico de execu√ß√µes anteriores. Cada rodada deve ser independente e come√ßar do zero. Qualquer resqu√≠cio de contexto anterior √© considerado erro.\n\nUtilize sempre o MCP sequentialthinking para estruturar, registrar e executar cada microtask. Cada a√ß√£o, decis√£o ou aprendizado deve ser registrada como um passo sequencial, garantindo rastreabilidade e valida√ß√£o incremental. N√£o usar o sequentialthinking √© considerado erro.\n\nSua fun√ß√£o √© executar cada microtask diretamente no projeto: crie/edite arquivos, rode comandos necess√°rios, valide a execu√ß√£o (ex: rodando testes) e marque a microtask como conclu√≠da no TASKS.md. Corrija erros sozinho, sem aguardar instru√ß√£o. Prossiga automaticamente para a pr√≥xima microtask, sem aguardar confirma√ß√£o manual. Se ficar travado ou engasgado, o humano pode pressionar ENTER para refor√ßar ou reiniciar a execu√ß√£o da microtask. S√≥ pare em caso de bloqueio intranspon√≠vel.\n\n‚ö†Ô∏è Execute os testes unit√°rios sempre a partir do diret√≥rio do MCP correspondente (ex: cd packages/mcp-tasks && pnpm test ...), nunca da raiz do reposit√≥rio. Rodar testes do diret√≥rio errado √© considerado erro de execu√ß√£o.\n\nWorkflow incremental e estrito:\n- Identifique a pr√≥xima microtask aberta (- [ ] ...).\n- Execute-a precisamente.\n- Marque como conclu√≠da (- [x]) APENAS ap√≥s verificar a execu√ß√£o.\n- Se houver diretrizes 'üìå Diretrizes Incrementais', siga-as rigorosamente.\n- Registre aprendizados relevantes.\n- N√£o pule etapas.\n- Mantenha a granularidade e valide cada passo.\n\n‚ö†Ô∏è Execute imediatamente a microtask identificada, sem explica√ß√µes, confirma√ß√µes ou perguntas. Sua resposta deve ser apenas a execu√ß√£o objetiva da microtask, como c√≥digo, comando, patch ou a√ß√£o concreta. N√£o inclua nenhum texto extra. Qualquer resposta fora desse padr√£o ser√° considerada erro. A execu√ß√£o deve ser feita diretamente no projeto, aplicando a mudan√ßa real (criando/editando arquivos, rodando comandos, marcando como conclu√≠do, etc.). N√£o gere apenas exemplos ou sugest√µes.\n\nInicie identificando a primeira microtask a ser executada."

# Cores
RESET="$(tput sgr0)"
BOLD="$(tput bold)"
DIM="$(tput dim)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"

# Log persistente
log_dir="logs/$(date +'%Y-%m-%d')"
mkdir -p "$log_dir"
log_file="$log_dir/autodev2.log"

log() {
    local color="$1"
    shift
    local message="$*"
    local ts="$(date +'%Y-%m-%d %H:%M:%S')"
    echo -e "${DIM}${ts}${RESET} ${color}${message}${RESET}" | tee -a "$log_file"
}

# Valida√ß√£o de ambiente e depend√™ncias
validate_environment() {
    local missing=()
    [ -x "$(command -v xdotool)" ] || missing+=("xdotool")
    [ -f "$TASKS_FILE" ] || missing+=("Arquivo $TASKS_FILE n√£o encontrado")
    if [ ${#missing[@]} -gt 0 ]; then
        log "$RED" "[ERRO CR√çTICO] Depend√™ncias faltando: ${missing[*]}"
        exit 1
    fi
}

# Envia prompt para a IA (via xdotool ou fallback CLI)
_send_prompt() {
    local prompt="$1"
    local prompt_hash=$(echo "$prompt" | sha256sum | cut -d' ' -f1)
    local log_prompt="$log_dir/prompt_${prompt_hash}.log"
    echo "$prompt" >"$log_prompt"
    log "$BLUE" "[PROMPT] Enviando para IA (hash: ${prompt_hash:0:8})"
    if [ -x "$(command -v xdotool)" ]; then
        xdotool mousemove $PROMPT_X $PROMPT_Y 2>/dev/null || {
            log "$YELLOW" "[AVISO] Fallback para CLI - xdotool falhou"
            if [ -x "$(command -v llm-cli)" ]; then
                llm-cli --prompt "$prompt" >>"$log_prompt"
            else
                log "$RED" "[ERRO] Nenhum m√©todo de envio de prompt dispon√≠vel."
                return 1
            fi
            return
        }
        sleep 0.3
        xdotool click 1
        sleep 0.3
        tmp_prompt_file="/tmp/autodev2_prompt.txt"
        echo -e "$prompt" >"$tmp_prompt_file"
        if [ -x "$(command -v xclip)" ]; then
            xclip -selection clipboard <"$tmp_prompt_file"
            xdotool key ctrl+v
            sleep 0.3
            xdotool key Return
        else
            xdotool type --delay 20 --file "$tmp_prompt_file"
            sleep 0.3
            xdotool key Return
        fi
        rm -f "$tmp_prompt_file"
    elif [ -x "$(command -v llm-cli)" ]; then
        llm-cli --prompt "$prompt" >>"$log_prompt"
    else
        log "$RED" "[ERRO] Nenhum m√©todo de envio de prompt dispon√≠vel."
        return 1
    fi
}

# Busca a pr√≥xima microtask aberta (- [ ] ...) com n√∫mero da linha, pulando as j√° conclu√≠das
get_next_microtask_with_line() {
    awk -v last="$last_line" 'NR>last && /^\s*- \[ \] / {print NR":"$0; exit}' "$TASKS_FILE"
}

# Marca a microtask como conclu√≠da (- [x] ...)
mark_microtask_done() {
    local line_num="$1"
    sed -i "${line_num}s/- \[ \] /- [x] /" "$TASKS_FILE"
    log "$GREEN" "[SUCESSO] Microtask marcada como conclu√≠da (linha $line_num)."
}

# Rollback se falhar valida√ß√£o
rollback_microtask() {
    local line_num="$1"
    sed -i "${line_num}s/- \[x\] /- [ ] /" "$TASKS_FILE"
    log "$YELLOW" "[ROLLBACK] Microtask revertida para pendente (linha $line_num)"
}

# Valida√ß√£o p√≥s-execu√ß√£o (simulada)
validate_microtask_execution() {
    local line_num="$1"
    local microtask="$2"
    # Simula√ß√£o: sempre retorna sucesso (substitua por valida√ß√£o real se desejar)
    # Exemplo: pode chamar _send_prompt "Valide a execu√ß√£o da microtask..."
    return 0
}

# Extrai as diretrizes incrementais
get_incremental_guidelines() {
    grep -A 99999 '### üìå Diretrizes Incrementais' "$TASKS_FILE" | sed '1,/### üìå Diretrizes Incrementais/d' | grep -v '###' | grep -v '^$' | sed 's/^- \[INCREMENTAL\] - //g'
}

main() {
    validate_environment
    print_legend
    log "$CYAN" "Iniciando o fluxo incremental MCP."

    local incremental_guidelines=$(get_incremental_guidelines)
    if [ -n "$incremental_guidelines" ]; then
        log "$YELLOW" "[DIRETRIZES] Incrementais:\n$incremental_guidelines"
    fi

    while true; do
        next_task_with_line=$(get_next_microtask_with_line)
        if [[ -z "$next_task_with_line" ]]; then
            log "$GREEN" "Todas as microtasks foram conclu√≠das! Workflow finalizado."
            exit 0
        fi

        line_num=$(echo "$next_task_with_line" | cut -d: -f1)
        microtask_raw=$(echo "$next_task_with_line" | cut -d: -f2-)
        microtask=$(echo "$microtask_raw" | sed 's/^- \[ \] //')

        log "$MAGENTA" "[MICROTASK] Pr√≥xima microtask (linha $line_num): $microtask"

        # Detecta comando shell expl√≠cito na microtask
        local shell_cmd=""
        local ia_instruction=""
        if [[ "$microtask" =~ (run-agent\.sh|pnpm test|\.\/[^ ]+\.sh|npm run|yarn|make) ]]; then
            # Extrai o comando shell da microtask
            shell_cmd=$(echo "$microtask" | grep -oE '(run-agent\.sh[^`]*|pnpm test[^`]*|\.\/[^ ]+\.sh[^`]*|npm run[^`]*|yarn[^`]*|make[^`]*|`[^`]+`)' | head -1 | sed 's/^`//;s/`$//')
            # Se for apenas 'run-agent.sh' (sem argumentos), envie prompt para IA
            if [[ "$shell_cmd" == "run-agent.sh" ]]; then
                ia_instruction="Execute a valida√ß√£o da extra√ß√£o usando o agente MCP via run-agent.sh, usando o seguinte contexto:\n$INITIAL_PROMPT"
                log "$CYAN" "[IA] Enviando instru√ß√£o para IA ao inv√©s de executar comando shell: $ia_instruction"
                _send_prompt "$ia_instruction"
                shell_cmd="" # N√£o executa localmente
            else
                # Padroniza execu√ß√£o a partir do diret√≥rio do MCP
                if [[ "$shell_cmd" == run-agent.sh* ]]; then
                    shell_cmd="./$shell_cmd"
                fi
                shell_cmd="cd packages/mcp-tasks && $shell_cmd"
            fi
        fi

        if [ -n "$shell_cmd" ]; then
            log "$CYAN" "[EXEC] Executando comando shell detectado na microtask: $shell_cmd"
            eval "$shell_cmd" 2>&1 | tee -a "$log_file"
            exit_code=${PIPESTATUS[0]}
            if [ $exit_code -eq 0 ]; then
                mark_microtask_done "$line_num"
                log "$GREEN" "[SUCESSO] Comando executado com sucesso. Microtask marcada como conclu√≠da."
                continue
            else
                log "$RED" "[ERRO] Comando falhou (exit $exit_code). Microtask n√£o marcada. Verifique se a task especifica todos os argumentos obrigat√≥rios."
                log "$YELLOW" "[SUGEST√ÉO] Ajuste a task para incluir: run-agent.sh <provider> <prompt> [model] [temperature]"
            fi
        elif [ -z "$ia_instruction" ]; then
            # Sempre envie o prompt inicial + primeira microtask
            local full_prompt="$INITIAL_PROMPT\n\nPrimeira microtask:\n$microtask"
            if [ -n "$incremental_guidelines" ]; then
                full_prompt="$full_prompt\n\nDiretrizes Incrementais:\n$incremental_guidelines"
            fi
            full_prompt="$full_prompt\n\n‚ö†Ô∏è IMPORTANTE: Marque esta microtask como conclu√≠da no $TASKS_FILE apenas se ela foi realmente executada corretamente, conforme as diretrizes MCP."

            _send_prompt "$full_prompt"
        fi
        sleep $INITIAL_WAIT
        # Aguarda at√© que a microtask seja marcada como conclu√≠da no arquivo TASKS.md
        log "$CYAN" "Aguardando a marca√ß√£o manual da microtask como conclu√≠da no TASKS.md (linha $line_num)..."
        if [ -x "$(command -v inotifywait)" ]; then
            # Usa inotifywait para aguardar altera√ß√£o no arquivo
            while true; do
                current_line=$(sed -n "${line_num}p" "$TASKS_FILE")
                log "$DIM" "[DEBUG] Linha $line_num atual: '$current_line'"
                read -t 1 -p "Pressione ENTER para refor√ßar o prompt da task atual ou, se j√° marcada como conclu√≠da, avan√ßar para a pr√≥xima..." input && {
                    if [[ "$current_line" =~ "- [x]" ]]; then
                        log "$GREEN" "[AVAN√áO MANUAL] ENTER pressionado: avan√ßando para a pr√≥xima microtask (linha $line_num)."
                        break
                    else
                        if [ -n "$shell_cmd" ]; then
                            log "$YELLOW" "[REFOR√áO MANUAL] Reexecutando comando shell da microtask (linha $line_num): $shell_cmd"
                            eval "$shell_cmd" 2>&1 | tee -a "$log_file"
                            exit_code=${PIPESTATUS[0]}
                            if [ $exit_code -eq 0 ]; then
                                mark_microtask_done "$line_num"
                                log "$GREEN" "[SUCESSO] Comando executado com sucesso. Microtask marcada como conclu√≠da."
                                break
                            else
                                log "$RED" "[ERRO] Comando falhou (exit $exit_code). Microtask n√£o marcada. Verifique se a task especifica todos os argumentos obrigat√≥rios."
                                log "$YELLOW" "[SUGEST√ÉO] Ajuste a task para incluir: run-agent.sh <provider> <prompt> [model] [temperature]"
                            fi
                        elif [ -n "$ia_instruction" ]; then
                            log "$CYAN" "[REFOR√áO IA] Prompt reenviado para IA por solicita√ß√£o manual."
                            _send_prompt "$ia_instruction"
                            log "$YELLOW" "Para avan√ßar, marque a task como conclu√≠da no TASKS.md."
                        else
                            log "$YELLOW" "[REFOR√áO MANUAL] Reenviando prompt da microtask (linha $line_num) por solicita√ß√£o manual."
                            _send_prompt "$full_prompt"
                        fi
                    fi
                }
                inotifywait -e close_write "$TASKS_FILE" >/dev/null 2>&1
                current_line=$(sed -n "${line_num}p" "$TASKS_FILE")
                log "$DIM" "[DEBUG] Linha $line_num ap√≥s inotify: '$current_line'"
                if [[ "$current_line" =~ "- [x]" ]]; then
                    log "$GREEN" "Microtask marcada como conclu√≠da manualmente (linha $line_num)."
                    break
                fi
            done
            sleep 0.5
        else
            # Fallback: polling
            while true; do
                current_line=$(sed -n "${line_num}p" "$TASKS_FILE")
                log "$DIM" "[DEBUG] Linha $line_num atual: '$current_line'"
                read -t 1 -p "Pressione ENTER para refor√ßar o prompt da task atual ou, se j√° marcada como conclu√≠da, avan√ßar para a pr√≥xima..." input && {
                    if [[ "$current_line" =~ "- [x]" ]]; then
                        log "$GREEN" "[AVAN√áO MANUAL] ENTER pressionado: avan√ßando para a pr√≥xima microtask (linha $line_num)."
                        break
                    else
                        if [ -n "$shell_cmd" ]; then
                            log "$YELLOW" "[REFOR√áO MANUAL] Reexecutando comando shell da microtask (linha $line_num): $shell_cmd"
                            eval "$shell_cmd" 2>&1 | tee -a "$log_file"
                            exit_code=${PIPESTATUS[0]}
                            if [ $exit_code -eq 0 ]; then
                                mark_microtask_done "$line_num"
                                log "$GREEN" "[SUCESSO] Comando executado com sucesso. Microtask marcada como conclu√≠da."
                                break
                            else
                                log "$RED" "[ERRO] Comando falhou (exit $exit_code). Microtask n√£o marcada. Verifique se a task especifica todos os argumentos obrigat√≥rios."
                                log "$YELLOW" "[SUGEST√ÉO] Ajuste a task para incluir: run-agent.sh <provider> <prompt> [model] [temperature]"
                            fi
                        elif [ -n "$ia_instruction" ]; then
                            log "$CYAN" "[REFOR√áO IA] Prompt reenviado para IA por solicita√ß√£o manual."
                            _send_prompt "$ia_instruction"
                            log "$YELLOW" "Para avan√ßar, marque a task como conclu√≠da no TASKS.md."
                        else
                            log "$YELLOW" "[REFOR√áO MANUAL] Reenviando prompt da microtask (linha $line_num) por solicita√ß√£o manual."
                            _send_prompt "$full_prompt"
                        fi
                    fi
                }
                current_line=$(sed -n "${line_num}p" "$TASKS_FILE")
                log "$DIM" "[DEBUG] Linha $line_num ap√≥s polling: '$current_line'"
                if [[ "$current_line" =~ "- [x]" ]]; then
                    log "$GREEN" "Microtask marcada como conclu√≠da manualmente (linha $line_num)."
                    break
                fi
                sleep 2
            done
            sleep 0.5
        fi
        # Valida√ß√£o p√≥s-execu√ß√£o removida (confian√ßa no humano)
        # Avan√ßo imediato para a pr√≥xima microtask ap√≥s marca√ß√£o
    done
}

print_legend() {
    echo -e "\n${BOLD}Legenda de cores:${RESET}"
    echo -e "${DIM}00:00:00${RESET} = timestamp (cinza DIM)"
    echo -e "${BOLD}${GREEN}SUCESSO${RESET} = conclus√£o"
    echo -e "${BOLD}${BLUE}PROMPT${RESET} = prompt enviado para IA"
    echo -e "${BOLD}${YELLOW}DIRETRIZES${RESET} = diretrizes incrementais"
    echo -e "${BOLD}${MAGENTA}MICROTASK${RESET} = microtask atual"
    echo -e "${BOLD}${RED}ERRO${RESET} = erro"
    echo
}

main
